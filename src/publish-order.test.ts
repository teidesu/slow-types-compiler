import { describe, expect, it } from 'vitest'
import { determinePublishOrder } from './publish-order.js'

describe('determinePublishOrder', () => {
    // came-up with this test case by hand
    it('should work with a simple graph', () => {
        expect(determinePublishOrder({
            foo: ['bar'],
            bar: ['baz', 'egg'],
            baz: ['egg'],
            egg: [],
        })).toEqual(['egg', 'baz', 'bar', 'foo'])
    })

    // test cases from deno
    // https://github.com/denoland/deno/blob/main/cli/tools/registry/publish_order.rs
    it('should work for graph with no deps', () => {
        expect(determinePublishOrder({
            a: [],
            b: [],
            c: [],
        })).toEqual(['a', 'b', 'c'])
    })

    it('should work for graph with a single dep', () => {
        expect(determinePublishOrder({
            a: ['b'],
            b: ['c'],
            c: [],
        })).toEqual(['c', 'b', 'a'])
    })

    it('should work for graph with a multiple deps', () => {
        expect(determinePublishOrder({
            a: ['b', 'c'],
            b: ['c'],
            c: [],
            d: [],
            e: ['f'],
            f: [],
        })).toEqual(['c', 'b', 'a', 'd', 'f', 'e'])
        // NB: in deno test cases, the expected order is 'c', 'f', 'd', 'e', 'b', 'a'
        // but this one is valid too
    })

    it('should fail for circular dependency', () => {
        expect(() => {
            determinePublishOrder({
                a: ['b'],
                b: ['c'],
                c: ['a'],
            })
        }).toThrow('Circular dependency detected')
    })

    // real-world graphs
    it('should work for mtcute deps graph', () => {
        expect(determinePublishOrder({
            'bun': ['core', 'wasm', 'markdown-parser', 'html-parser'],
            'convert': ['core', 'tl'],
            'core': ['tl', 'tl-runtime', 'file-id'],
            'create-bot': [],
            'crypto-node': ['node'],
            'dispatcher': ['core'],
            'file-id': ['tl-runtime'],
            'html-parser': [],
            'http-proxy': ['node'],
            'i18n': [],
            'markdown-parser': [],
            'mtproxy': ['node'],
            'node': ['core', 'wasm', 'markdown-parser', 'html-parser'],
            'socks-proxy': ['node'],
            'test': [],
            'tl': [],
            'tl-runtime': [],
            'tl-utils': ['tl-runtime'],
            'wasm': [],
            'web': ['core', 'wasm'],
        })).toEqual([
            'tl',
            'tl-runtime',
            'file-id',
            'core',
            'wasm',
            'markdown-parser',
            'html-parser',
            'bun',
            'convert',
            'create-bot',
            'node',
            'crypto-node',
            'dispatcher',
            'http-proxy',
            'i18n',
            'mtproxy',
            'socks-proxy',
            'test',
            'tl-utils',
            'web',
        ])
    })

    it('should work for solid-primitives deps graph', () => {
        expect(determinePublishOrder({
            'active-element': ['event-listener', 'utils'],
            'analytics': [],
            'audio': ['static-store', 'utils'],
            'autofocus': ['utils'],
            'bounds': ['event-listener', 'resize-observer', 'static-store', 'utils'],
            'broadcast-channel': [],
            'clipboard': ['utils'],
            'connectivity': ['event-listener', 'rootless', 'utils'],
            'context': [],
            'controlled-props': ['utils'],
            'cursor': ['utils'],
            'date': ['memo', 'timer', 'utils'],
            'deep': ['memo'],
            'destructure': ['utils'],
            'devices': [],
            'event-bus': ['utils'],
            'event-dispatcher': [],
            'event-listener': ['utils'],
            'event-props': [],
            'fetch': [],
            'filesystem': [],
            'flux-store': [],
            'fullscreen': [],
            'geolocation': ['static-store', 'utils'],
            'gestures': [],
            'graphql': ['utils'],
            'history': ['utils'],
            'i18n': [],
            'idle': [],
            'immutable': ['keyed', 'utils'],
            'input-mask': [],
            'intersection-observer': ['utils'],
            'jsx-tokenizer': ['utils'],
            'keyboard': ['event-listener', 'rootless', 'utils'],
            'keyed': [],
            'lifecycle': [],
            'list': [],
            'map': ['trigger'],
            'marker': [],
            'masonry': ['utils'],
            'media': ['event-listener', 'rootless', 'static-store', 'utils'],
            'memo': ['scheduled', 'utils'],
            'mouse': ['event-listener', 'rootless', 'static-store', 'utils'],
            'mutable': [],
            'mutation-observer': ['utils'],
            'page-visibility': ['event-listener', 'rootless', 'utils'],
            'pagination': ['utils'],
            'permission': [],
            'platform': [],
            'pointer': ['event-listener', 'rootless', 'utils'],
            'presence': ['utils'],
            'promise': ['utils'],
            'props': ['utils'],
            'raf': ['utils'],
            'range': ['utils'],
            'refs': ['utils'],
            'resize-observer': ['event-listener', 'rootless', 'static-store', 'utils'],
            'resource': [],
            'rootless': ['utils'],
            'scheduled': [],
            'script-loader': [],
            'scroll': ['event-listener', 'rootless', 'static-store'],
            'selection': [],
            'set': ['trigger'],
            'share': [],
            'signal-builders': ['utils'],
            'start': [],
            'state-machine': [],
            'static-store': ['utils'],
            'storage': ['utils'],
            'stream': ['utils'],
            'styles': ['rootless', 'utils'],
            'timer': [],
            'transition-group': [],
            'trigger': ['utils'],
            'tween': [],
            'upload': ['utils'],
            'utils': [],
            'websocket': [],
            'workers': [],
        })).toEqual([
            'utils',
            'event-listener',
            'active-element',
            'analytics',
            'static-store',
            'audio',
            'autofocus',
            'rootless',
            'resize-observer',
            'bounds',
            'broadcast-channel',
            'clipboard',
            'connectivity',
            'context',
            'controlled-props',
            'cursor',
            'scheduled',
            'memo',
            'timer',
            'date',
            'deep',
            'destructure',
            'devices',
            'event-bus',
            'event-dispatcher',
            'event-props',
            'fetch',
            'filesystem',
            'flux-store',
            'fullscreen',
            'geolocation',
            'gestures',
            'graphql',
            'history',
            'i18n',
            'idle',
            'keyed',
            'immutable',
            'input-mask',
            'intersection-observer',
            'jsx-tokenizer',
            'keyboard',
            'lifecycle',
            'list',
            'trigger',
            'map',
            'marker',
            'masonry',
            'media',
            'mouse',
            'mutable',
            'mutation-observer',
            'page-visibility',
            'pagination',
            'permission',
            'platform',
            'pointer',
            'presence',
            'promise',
            'props',
            'raf',
            'range',
            'refs',
            'resource',
            'script-loader',
            'scroll',
            'selection',
            'set',
            'share',
            'signal-builders',
            'start',
            'state-machine',
            'storage',
            'stream',
            'styles',
            'transition-group',
            'tween',
            'upload',
            'websocket',
            'workers',
        ])
    })
})
